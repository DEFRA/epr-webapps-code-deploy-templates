parameters:
- name: imageTag
  type: string
  default: 'latest'
- name: azureSubscription
  type: string
- name: azureResourceGroup
  type: string
- name: acrName
  type: string
- name: registryName
  type: string
- name: serviceName
  type: string
- name: targetEnvironment
  type: string

steps:
  - bash: |
      echo "Deploying dockerImage --> "${{ parameters.registryName }}:${{ parameters.imageTag }} "to env --> "${{ parameters.targetEnvironment }}
      echo "Deploying dockerImage to "${{ upper(parameters.serviceName) }}
    displayName: 'Show Environment Details'

  - bash: |
      echo "##vso[task.setvariable variable=subscription]${{ parameters.azureSubscription }}"
    displayName: 'Set Variable'

  - ${{ if ne(parameters.targetEnvironment, 'development') }}:
    - task: AzureKeyVault@2
      displayName: 'Obtain Docker Password'
      inputs:
        azureSubscription: 'AZD-RWD-DEV1'
        KeyVaultName: 'DEVRWDINFKV1401'
        SecretsFilter: 'DockerPassword'
        RunAsPreJob: true
    
    - task: AzureCLI@2
      displayName: 'Copy Image to ${{ parameters.targetEnvironment }}'
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name ${{ parameters.acrName }}
          az acr import --name ${{ parameters.acrName }} --source devrwdinfac1401.azurecr.io/${{ parameters.registryName}}:${{ parameters.imageTag }} --image ${{ parameters.registryName }}:${{ parameters.imageTag }} --username devrwdinfac1401 --password $(DockerPassword) --force

  - task: AzureRmWebAppDeployment@4
    displayName: 'Deploy code to --> ${{ upper(parameters.serviceName) }}'
    inputs:
      ConnectionType: 'AzureRM'
      azureSubscription: ${{ parameters.azureSubscription }}
      appType: 'webAppContainer'
      WebAppName: ${{ upper(parameters.serviceName) }}
      DockerNamespace: '${{ parameters.acrName }}.azurecr.io'
      DockerRepository: ${{ parameters.registryName }}
      DockerImageTag: ${{ parameters.imageTag }}
  
  - task: AzureCLI@2
    displayName: "Update config setting"
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az webapp config appsettings set \
          --name ${{ upper(parameters.serviceName) }} \
          --resource-group ${{ parameters.azureResourceGroup }} \
          --settings ASPNETCORE_FORWARDEDHEADERS_ENABLED=true

  - task: AzureCLI@2
    displayName: 'Restart Service - ${{ upper(parameters.serviceName) }}'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      scriptType: 'pscore'
      scriptLocation: 'inlineScript'
      inlineScript: |
        Set-StrictMode -Version 3.0

        $serviceName = "${{ parameters.serviceName }}".ToUpper()

        if ($serviceName -match "rwdwebwa") {
          Write-Host "Restarting WA $serviceName"
          $ids = az webapp list --query "[?name=='$serviceName']" | jq -r '.[].id'
          az webapp restart --ids $ids
        } elseif ($serviceName -match "rwdwebfa") {
          Write-Host "Restarting FA $serviceName"
          $ids = az functionapp list --query "[?name=='$serviceName']" | jq -r '.[].id'
          az functionapp restart --ids $ids
        } else {
          Write-Error "Unknown Service Type"
          exit 1
        }

  - task: AzureKeyVault@2
    condition: eq(variables['subscription'], 'AZD-RWD-DEV4')
    displayName: 'Obtain WebhookUrl'
    inputs:
      azureSubscription: 'AZD-RWD-DEV1'
      KeyVaultName: 'DEVRWDINFKV1401'
      SecretsFilter: 'TeamsNotificationWebhook, TeamsNotificationWebhookEviden'
  
  - template: send-teams-notification.yaml
    parameters:
      condition: eq(variables['subscription'], 'AZD-RWD-DEV4')
      webhookUrl: $(TeamsNotificationWebhook)
      message: |
        Summary: Deployed ${{ parameters.registryName }}:${{ parameters.imageTag }} to ${{ parameters.serviceName }} in ${{ parameters.azureSubscription }} \n
        Repository: $(Build.Repository.Name) \n
        CommitID: $(Build.SourceVersion) \n
        Pipeline: $(Build.DefinitionName) \n
        Service: ${{ parameters.serviceName }} \n
        Target: ${{ parameters.registryName }}:${{ parameters.imageTag }} \n
        Subscription: ${{ parameters.azureSubscription }}
  
  - template: send-teams-notification.yaml
    parameters:
      condition: eq(variables['subscription'], 'AZD-RWD-DEV4')
      webhookUrl: $(TeamsNotificationWebhookEviden)
      message: |
        Summary: Deployed ${{ parameters.registryName }}:${{ parameters.imageTag }} to ${{ parameters.serviceName }} in ${{ parameters.azureSubscription }} \n
        Repository: $(Build.Repository.Name) \n
        CommitID: $(Build.SourceVersion) \n
        Pipeline: $(Build.DefinitionName) \n
        Service: ${{ parameters.serviceName }} \n
        Target: ${{ parameters.registryName }}:${{ parameters.imageTag }} \n
        Subscription: ${{ parameters.azureSubscription }}
