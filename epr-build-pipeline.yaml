parameters:
- name: solutionFolder
  type: string
  default: 'src'
- name: projectFolder
  type: string
- name: testProjectFolder
  type: string
- name: sonarQubeProjectKey
  type: string
- name: sonarQubeProjectName
  type: string
- name: runTests
  type: boolean
  default: true
- name: azureSubscription
  type: string
- name: acrAzureContainerRegistryName
  type: string
- name: acrRepositoryName
  type: string
- name: branchName
  type: string
- name: runNugetTasks
  type: boolean
  default: true
- name: buildMigrationScript
  type: boolean
  default: false
- name: componentDirectory
  type: string
  default: ''
- name: runOWASPScan
  type: boolean
  default: true
# temporarily defaulted to false due to 3rd party issue
- name: gitleaksFailOnSecretDetection
  type: boolean
  default: false
- name: serviceName
  type: string
  default: ''
- name: sonarqubeInstance
  type: string
  default: 'SonarQube'
- name: checkoutName
  type: string

stages:
  - stage: ValidateAndBuild_${{parameters.checkoutName}}
    jobs:
      - job: RunTests
        displayName: Run Static Code Analysis and Tests
        steps:
          - template: templates/analyse-and-test.yaml
            parameters:
              solutionFolder: ${{ parameters.solutionFolder }}
              sonarQubeProjectKey: ${{ parameters.sonarQubeProjectKey }}
              sonarQubeProjectName: ${{ parameters.sonarQubeProjectName }}
              runTests: ${{ parameters.runTests }}
              runNugetTasks: ${{ parameters.runNugetTasks }}
              sonarqubeInstance: ${{ parameters.sonarqubeInstance }}
              checkoutName: ${{ parameters.checkoutName }}
              branchName: ${{ parameters.branchName }}
              
      - job: RunGitleaksSecretScan
        displayName: Run Gitleaks Secret Scan
        dependsOn: ''
        pool:
          vmImage: ubuntu-latest
        variables: 
        - name: commonTemplatesRepoSubDir
          value: s/CommonTemplates
        - name: commonTemplatesRepoRoot
          value: $(Pipeline.Workspace)/${{ variables.commonTemplatesRepoSubDir }}
        - name: sourceRepoSubDir
          value: s/source
        - name: sourceRepoRoot
          value: $(Pipeline.Workspace)/${{ variables.sourceRepoSubDir }}
        steps:
          - checkout: CommonTemplates
            path: ${{ variables.commonTemplatesRepoSubDir }}
            clean: true
          # - checkout: self
          #  path: ${{ variables.sourceRepoSubDir }}
          #  fetchDepth: 0
          - script: | 
              git clone --branch ${{parameters.branchName}} https://github.com/DEFRA/${{parameters.checkoutName}}.git /home/vsts/work/1/${{ variables.sourceRepoSubDir }}
          - template: templates/gitleaks-scan.yaml
            parameters:
              scanLocation: $(sourceRepoRoot)
              configPath: $(commonTemplatesRepoRoot)/configuration/gitleaks.toml
              failOnSecretDetection: ${{ parameters.gitleaksFailOnSecretDetection }}

      - ${{ if eq(parameters.runOWASPScan, true) }}:
        - job: RunOWASPTests
          displayName: Run OWASP Dependency checks
          dependsOn: RunTests
          steps:
            - template: templates/owaspcheck.yaml
              parameters:
                solutionFolder: ${{ parameters.solutionFolder }}
                testProjectFolder: ${{ parameters.testProjectFolder }}
                componentDirectory: ${{ parameters.componentDirectory }}
                branchName: ${{ parameters.branchName }}
                checkoutName: ${{ parameters.checkoutName }}

      - job: BuildAndPushDockerImage
        displayName: Build and Push Docker Image
        dependsOn: RunTests
        steps:
          - template: templates/docker.yaml
            parameters:
              azureSubscription: ${{ parameters.azureSubscription }}
              solutionFolder: ${{ parameters.solutionFolder }}
              projectFolder: ${{ parameters.projectFolder }}
              azureContainerRegistryName: ${{ parameters.acrAzureContainerRegistryName }}
              repositoryName: ${{ parameters.acrRepositoryName }}
              branchName: ${{parameters.branchName}}
              imagebranchName: ${{ replace(parameters.branchName, '/', '_') }}
              checkoutName: ${{ parameters.checkoutName }}

      - job: BuildAndPushSQLMigrationDockerImage
        displayName: Build and Push Docker Image - Migration Script
        dependsOn: BuildAndPushDockerImage
        condition: eq('${{parameters.buildMigrationScript}}', true)
        steps:
          - template: templates/docker-sql-migration-script.yaml
            parameters:
              azureSubscription: ${{ parameters.azureSubscription }}
              solutionFolder: ${{ parameters.solutionFolder }}
              projectFolder: ${{ parameters.projectFolder }}
              azureContainerRegistryName: ${{ parameters.acrAzureContainerRegistryName }}
              repositoryName: ${{ parameters.acrRepositoryName }}
              branchName: ${{ parameters.branchName }}
      
  - stage: DeployToDev4_${{parameters.checkoutName}}
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/main'))
    jobs:
      - job: DeployLatestMainDev4
        displayName: Deploy Latest Main to Dev4
        steps:
          - template: templates/deployment.yaml
            parameters:
              imageTag: 'main-latest'
              azureSubscription: ${{ parameters.azureSubscription }}
              acrName: ${{ parameters.acrAzureContainerRegistryName }}
              registryName: ${{ parameters.acrRepositoryName }}
              serviceName: ${{ parameters.serviceName }}
              targetEnvironment: 'development'
      
      - job: RunLatestSQLMigrationDev4
        displayName: Run latest SQL Migration for Dev4
        condition: eq('${{parameters.buildMigrationScript}}', true)
        steps:
          - template: templates/docker-run-sql-migration.yaml
            parameters:
              azureSubscription: ${{ parameters.azureSubscription }}
              solutionFolder: ${{ parameters.solutionFolder }}
              projectFolder: ${{ parameters.projectFolder }}
              azureContainerRegistryName: ${{ parameters.acrAzureContainerRegistryName }}
              repositoryName: ${{ parameters.acrRepositoryName }}
              branchName: 'main-latest'
