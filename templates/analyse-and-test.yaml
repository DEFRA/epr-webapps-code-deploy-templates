parameters:
  - name: solutionFolder
    type: string
    default: ''
  - name: sonarQubeProjectKey
    type: string
  - name: sonarQubeProjectName
    type: string
  - name: runTests
    type: boolean
    default: true
  - name: runNugetTasks
    type: boolean
    default: true
  - name: sonarqubeInstance
    type: string

steps:
  - script: |
      dotnet --list-sdks
      echo '{"sdk":{"version":"6.0.412","rollForward":"latestFeature","allowPrerelease":false}}' > ${{ parameters.solutionFolder }}/global.json

  - task: SonarQubePrepare@6
    inputs:
      SonarQube: '${{ parameters.sonarqubeInstance }}'
      scannerMode: 'MSBuild'
      projectKey: '${{parameters.sonarQubeProjectKey}}'
      projectName: '${{parameters.sonarQubeProjectName}}'
      extraProperties: sonar.cs.opencover.reportsPaths="**/coverage.opencover.xml"

  #- task: UseDotNet@2
  #  inputs:
  #    version: '6.x'

  - task: NuGetAuthenticate@1
    displayName: 'Authenticate to NuGet'
    condition: eq(${{parameters.runNugetTasks}}, true)

  - task: DotNetCoreCLI@2
    displayName: 'NuGet Restore'
    condition: eq(${{parameters.runNugetTasks}}, true)
    inputs:
      command: 'restore'
      projects: '**/*.sln'
      feedsToUse: 'config'
      nugetConfigPath: '${{parameters.solutionFolder}}/NuGet.Config'

  - task: DotNetCoreCLI@2
    displayName: 'Run Build'
    inputs:
      command: build
      projects: '**/*.csproj'

  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests'
    condition: eq(${{parameters.runTests}}, true)
    inputs:
      command: test
      projects: '**/*[Uu]nit[Tt]ests/*.csproj'
      arguments: '--configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      publishTestResults: true

  - task: SonarQubeAnalyze@6
    inputs:
      jdkversion: 'JAVA_HOME_17_X64'

  - task: SonarQubePublish@6
    retryCountOnTaskFailure: 5
    inputs:
      pollingTimeoutSec: '200'

  - task: AzureKeyVault@2
    displayName: 'Obtain SonarQube Token from Keyvault'
    inputs:
      azureSubscription: 'AZD-RWD-DEV1'
      KeyVaultName: 'DEVRWDINFKV1401'
      SecretsFilter: 'EPRADO-SonarQubeToken'

  - powershell: |
        if ("$(Build.Reason)" -eq "PullRequest")
        {
          Write-Host "RepoProvider:" $(Build.Repository.Provider)
          Switch ("$(Build.Repository.Provider)") {
            "TfsGit" { $pullRequestId = "$(System.PullRequest.PullRequestId)" }
            "GitHub" { $pullRequestId = "$(System.PullRequest.PullRequestNumber)" }
            Default { Write-Host "Build.Repository.Provider '$(Build.Repository.Provider)' was unexpected"; exit 1 }
          }
          Write-Host "Checking SonarQube results for" ${{parameters.sonarQubeProjectKey}} "from pull request" $pullRequestId
          $qualifier = '&pullRequest='+$pullRequestId
        }
        else
        {
          $branchName = "$(Build.SourceBranch)".Replace('refs/heads/', '')
          Write-Host "Checking SonarQube results for" ${{parameters.sonarQubeProjectKey}} "from branch" $branchName
          $escapedBranchName = [system.uri]::EscapeDataString("$branchName")
          $qualifier = '&branch='+$escapedBranchName
        }
        Switch ("${{parameters.sonarqubeInstance}}") {
          "SonarQube" { $instanceUrlPart = "vss-sonarqube.azure.defra.cloud" }
          "SonarQubeLatest" {
            $sonarQubeApiToken = [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(${EPRADO-SonarQubeToken} + ":"))
            $headers = @{
              "Authorization" = "Basic $sonarQubeApiToken"
              "Accept" = "application/json"
            };
            $instanceUrlPart = "vss-sonarqube-upgrade.azure.defra.cloud" 
          }
          Default { Write-Host "parameters.sonarqubeInstance '${{parameters.sonarqubeInstance}}' was unexpected"; exit 1 }
        }
        $uri = "https://$instanceUrlPart/api/qualitygates/project_status?projectKey=${{parameters.sonarQubeProjectName}}" + $qualifier
        Write-Host "SonarQube URI = " $uri
        try {
          $qualityGateStatus = Invoke-RestMethod -Uri $uri -Headers $headers -Method Get;
        }
        catch {
          Write-Host "ERROR GETTING SONARQUBE STATUS: " $_
          exit 0
        }
        if ($qualityGateStatus.projectStatus.status -eq "OK") {
          Write-Host "Quality Gate Succeeded";
          exit 0; # all is good, quit here
        } else {
          Write-Host "##vso[task.logissue type=warning;]Quality Gate failed."
          $qualityGateStatus | ConvertTo-Json | Write-Host;
          $webUrl = "https://$instanceUrlPart/dashboard?id=${{parameters.sonarQubeProjectName}}" + $qualifier;
          Write-Host "SonarQube link (needs OpenVPN)" $webUrl
          Write-Host "##vso[task.complete result=SucceededWithIssues;]"
          # Write-Host "##[error]Quality Gate failed. Stopping the build."
          # exit 1 - HARD FAIL COMING SOON!
          # $gateErrors = $qualityGateStatus.projectStatus.conditions | Where-Object {$_.status -eq "ERROR" };
        }
    displayName: Check SonarQube Quality Gate