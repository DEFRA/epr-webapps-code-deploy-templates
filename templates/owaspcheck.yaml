parameters:
  - name: solutionFolder
    type: string
    default: ''
  - name: testProjectFolder
    type: string
    default: ''
  - name: componentDirectory
    type: string
    default: ''

steps:
  - script: |
      echo '${{parameters.solutionFolder}}/${{parameters.componentDirectory}}/${{parameters.testProjectFolder}}/${{parameters.testProjectFolder}}.csproj'

  - task: Bash@3
    displayName: 'Look for dependency-check data directory'
    inputs:
      targetType: 'inline'
      script: |
        # Find for dependency-check root directory
        dc_directory=$(find $AGENT_WORKFOLDER/_tasks -type d -name dependency-check)
        echo "##vso[task.setvariable variable=DEPENDENCY_CHECK_DATA]${dc_directory}/data"

  - task: Cache@2
    displayName: Cache dependency check data
    inputs:
      key: 'dependency-check | "$(Agent.OS)"'
      path: $(DEPENDENCY_CHECK_DATA)

  - task: PythonScript@0
    displayName: 'Replace Cyrillic Characters in .csproj File'
    inputs:
      scriptSource: 'inline'
      script: |
        import os
        def replace_cyrillic_with_latin(file_path):
            cyrillic_to_latin = {'о': 'o', 'е': 'e', 'х': 'x'}
            with open(file_path, 'r', encoding='utf-8') as file:
                content = file.read()
            for cyrillic_char, latin_char in cyrillic_to_latin.items():
                content = content.replace(cyrillic_char, latin_char)
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(content)

        def file_exists(file_path):
          return os.path.isfile(file_path)


        file_path = '$(Build.SourcesDirectory)/src/EPR.Payment.Facade.Common.UnitTests/EPR.Payment.Facade.Common.UnitTests.csproj'
        if file_exists(file_path): 
          replace_cyrillic_with_latin(file_path)
          print(f'Replaced Cyrillic characters with Latin characters in {file_path}.')
            
  - task: AzureKeyVault@2
    displayName: 'Get OWASP NVD Key'
    inputs:
      azureSubscription: 'AZD-RWD-DEV1'
      KeyVaultName: 'DEVRWDINFKV1401'
      SecretsFilter: 'OwaspNVDKey'

  - task: dependency-check-build-task@6
    displayName: 'Dependency Check'
    inputs:
      projectName: 'owasptest'
      scanPath: '${{parameters.solutionFolder}}/${{parameters.componentDirectory}}/${{parameters.testProjectFolder}}/${{parameters.testProjectFolder}}.csproj'
      format: 'XML, HTML'
      additionalArguments: '--nvdApiKey $(OwaspNVDKey) --log $(Build.ArtifactStagingDirectory)/dependency-check.log'

  - task: DownloadBuildArtifacts@1
    displayName: 'Download Pipeline Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: '**'
      downloadPath: '$(Common.TestResultsDirectory)'
      cleanDestinationFolder: false

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Common.TestResultsDirectory)'
      Contents: '**'
      TargetFolder: '$(System.DefaultWorkingDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'dependency-check/dependency-check-report.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      testRunTitle: 'Dependency Check'
      buildPlatform: 'owasp'
      mergeTestResults: 'true'
      buildConfiguration: '$(BuildConfiguration)'