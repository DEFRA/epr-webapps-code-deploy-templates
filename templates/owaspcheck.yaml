parameters:
  - name: solutionFolder
    type: string
    default: ''
  - name: testProjectFolder
    type: string
    default: ''
  - name: componentDirectory
    type: string
    default: ''

steps:
  - script: |
      echo '${{parameters.solutionFolder}}/${{parameters.componentDirectory}}/${{parameters.testProjectFolder}}/${{parameters.testProjectFolder}}.csproj'

  - task: AzureKeyVault@2
    displayName: 'Get Dev1 storage Key'
    inputs:
     azureSubscription: 'AZD-RWD-DEV1'
     KeyVaultName: 'DEVRWDINFKV1401'
     SecretsFilter: 'DEV1-storage-account-key'

  - task: AzureCLI@2
    inputs:
     azureSubscription: 'AZD-RWD-DEV1'
     scriptType: 'bash'
     scriptLocation: 'inlineScript'
     inlineScript: |
        # Download the blobs using the connection string
        az storage blob download --account-name devrwdwebsa1401 --container-name owasp-file-storage --name nvdcve-1.1-2024.json.gz --account-key $(DEV1-storage-account-key) --file $(Build.ArtifactStagingDirectory)/nvdcve-1.1-2024.json.gz 
        az storage blob download --account-name devrwdwebsa1401 --container-name owasp-file-storage --name nvdcve-1.1-2024.meta --account-key $(DEV1-storage-account-key) --file $(Build.ArtifactStagingDirectory)/nvdcve-1.1-2024.meta 
        ls -l $(Build.ArtifactStagingDirectory)
     displayName: 'Download files from blob'


  - script: |
      echo "Starting HTTP server using busybox..."
      nohup busybox httpd -f -p 8000 -h $(Build.ArtifactStagingDirectory) &
    displayName: 'Start HTTP Server with Busybox'

  - script: |
     echo "Testing HTTP server..."
     curl -I http://localhost:8000/nvdcve-1.1-2024.json.gz
     curl -I http://localhost:8000/nvdcve-1.1-2024.meta
     curl -o /dev/null http://localhost:8000/nvdcve-1.1-2024.json.gz
     curl -o /dev/null http://localhost:8000/nvdcve-1.1-2024.meta
    displayName: 'Test HTTP Server'

  - script: |
      cat $(Build.ArtifactStagingDirectory)/odc.log
    displayName: 'Display Dependency Check Log'
    condition: always()

  - script: |
      echo "Running Dependency Check..."
      /agent/_work/_tasks/dependency-check-build-task_47ea1f4a-57ba-414a-b12e-c44f42765e72/6.2.3/dependency-check/bin/dependency-check.sh --project owasptest --out $(Build.ArtifactStagingDirectory) --scan '${{parameters.solutionFolder}}/${{parameters.componentDirectory}}/${{parameters.testProjectFolder}}/${{parameters.testProjectFolder}}.csproj' --format XML,HTML --nvdDatafeed http://localhost:8000/nvdcve-1.1-2024.json.gz --nvdDatafeed http://localhost:8000/nvdcve-1.1-2024.meta --log $(Build.ArtifactStagingDirectory)/odc.log --verbose
    displayName: 'Run Dependency Check'

  - script: |
      echo "Displaying Dependency Check log..."
      if [ -f "$(Build.ArtifactStagingDirectory)/odc.log" ]; then
        cat "$(Build.ArtifactStagingDirectory)/odc.log"
      else
        echo "Log file not found."
      fi
    displayName: 'Display Dependency Check Log'

  - script: |
      echo "Cleaning up..."
      pkill busybox
    displayName: 'Cleanup'
    condition: always()

  - task: DownloadBuildArtifacts@1
    displayName: 'Download Pipeline Artifact'
    inputs:
      buildType: 'current'
      downloadType: 'specific'
      itemPattern: '**'
      downloadPath: '$(Common.TestResultsDirectory)'
      cleanDestinationFolder: false

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Common.TestResultsDirectory)'
      Contents: '**'
      TargetFolder: '$(System.DefaultWorkingDirectory)'

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'dependency-check/dependency-check-report.xml'
      searchFolder: '$(System.DefaultWorkingDirectory)'
      testRunTitle: 'Dependency Check'
      buildPlatform: 'owasp'
      mergeTestResults: 'true'
      buildConfiguration: '$(BuildConfiguration)'
